[{"path":"https://docs.ropensci.org/photosearcher/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/photosearcher/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"How to contribute","title":"How to contribute","text":"Thank reading contribution guidelines. Flickr API whole range methods currently included welcome volunteer developers wish help increase number included functions package. full list methods available Flickr API check Flickr API website.","code":""},{"path":"https://docs.ropensci.org/photosearcher/CONTRIBUTING.html","id":"submitting-changes","dir":"","previous_headings":"","what":"Submitting changes","title":"How to contribute","text":"sending GitHub Pull Request stating clearly changes made. small changes single lines messages suffice, larger changes please provide longer detailed message.","code":""},{"path":"https://docs.ropensci.org/photosearcher/CONTRIBUTING.html","id":"coding-conventions","dir":"","previous_headings":"","what":"Coding conventions","title":"How to contribute","text":"simple coding conventions follow: * package designed following rOpenSci Guidelines. * Code style automated using styler package. * package open source, please ensure code clear read . possible comment code throughout. Thank , Nathan","code":""},{"path":"https://docs.ropensci.org/photosearcher/articles/flickr_in_research.html","id":"flickr-papers","dir":"Articles","previous_headings":"","what":"Flickr papers","title":"Flickr in research","text":"understand Flickr currently use scientific research investigated discipline scope articles keyword flickr PLoS journals. total 200 papers keyword flickr PLoS journals.","code":"plos <- rplos::searchplos(q='flickr',                            fl=c('id','publication_date','subject', 'subject_level_1'),                           limit = 200)$data %>%       mutate(keywords = map_chr(subject, get_kw),          subjects = subject_level_1)"},{"path":"https://docs.ropensci.org/photosearcher/articles/flickr_in_research.html","id":"subject-frequency","dir":"Articles","previous_headings":"","what":"Subject frequency","title":"Flickr in research","text":"understand disciplines science using Flickr calculated frequency papers research field:","code":"plos %>%    pull(subjects) %>%    paste(collapse = \",\") %>%    str_split(\",\") %>%    table %>%    as_tibble() ## # A tibble: 12 × 2 ##    .                                      n ##    <chr>                              <int> ##  1 Biology and life sciences            122 ##  2 Computer and information sciences     66 ##  3 Earth sciences                        34 ##  4 Ecology and environmental sciences    31 ##  5 Engineering and technology            30 ##  6 Medicine and health sciences         119 ##  7 NA                                     1 ##  8 People and places                     48 ##  9 Physical sciences                     42 ## 10 Research and analysis methods         92 ## 11 Science policy                        33 ## 12 Social sciences                      114"},{"path":"https://docs.ropensci.org/photosearcher/articles/flickr_in_research.html","id":"keyword-wordcloud","dir":"Articles","previous_headings":"","what":"Keyword Wordcloud","title":"Flickr in research","text":"understand topics covered Flickr researches found frequency keywords attributed Flickr papers:","code":"kws <- plos %>% pull(keywords) %>% paste(collapse = \",\") %>% str_split(\",\") %>% table %>% as.data.frame    wordcloud(words = kws$., freq = kws$Freq, min.freq = 1,           max.words=200, random.order=FALSE, rot.per=0.35,            colors=brewer.pal(8, \"Dark2\"))"},{"path":"https://docs.ropensci.org/photosearcher/articles/photosearcher.html","id":"searching-for-photographs","dir":"Articles","previous_headings":"","what":"Searching for photographs","title":"photosearcher","text":"photo_search() function can used search Flickr photographs meet specific search criteria. example, search sightings animals better understand species distribution: Using text parameter search phrase given. tag parameter can search photographs contain given tags using tags_any = TRUE, photographs contain given tags using tags_any = FALSE. Users can also use sf package search via simple features layer, can used find images specific location example aid resource management recreational activities English national parks. using parameter searches location has_geo == TRUE metadata images latitude longitude information retrieved.","code":"#Search for photos of foxes in the UK for the year 2017 foxes <- photo_search(mindate_taken = \"2017-01-01\",                       maxdate_taken = \"2018-01-01\",                       text = \"foxes\",                       bbox = \"-12.875977,49.210420,2.636719,59.977005\",                       has_geo = TRUE)    #Search for images of trees globally for the 1st of January 2019 trees <- photo_search(mindate_taken = \"2019-01-01\",                       maxdate_taken = \"2019-01-01\",                       text = \"tree\",                       has_geo = TRUE)  #Search for images with text mountain and tagged lake mountain_lake <- photo_search(mindate_taken = \"2019-01-01\",                              maxdate_taken = \"2019-02-01\",                              text = \"mountain\",                              tags = \"lake\",                              has_geo = FALSE) #Search for photographs with any of the tags tags_any <- photo_search(mindate_taken = \"2017-01-01\",                       maxdate_taken = \"2018-01-01\",                       tags = c(\"lake\", \"mountain\"),                       tags_any = TRUE,                       bbox = \"-12.875977,49.210420,2.636719,59.977005\",                       has_geo = TRUE)  #Search for photographs with all of the tags tags_all <- photo_search(mindate_taken = \"2017-01-01\",                       maxdate_taken = \"2018-01-01\",                       tags = c(\"lake\", \"mountain\"),                       tags_any = FALSE,                       bbox = \"-12.875977,49.210420,2.636719,59.977005\",                       has_geo = TRUE) #load shape file national_parks <- sf::st_read(system.file(\"shape/National_Parks_England.shp\", package=\"photosearcher\"))  #Search for photos of foxes in the UK for the year 2017 parks_hiking <- photo_search(mindate_taken = \"2012-01-01\",                              maxdate_taken = \"2012-04-01\",                              text = \"hiking\",                              sf_layer = national_parks,                              has_geo = TRUE)"},{"path":"https://docs.ropensci.org/photosearcher/articles/photosearcher.html","id":"downloading-images","dir":"Articles","previous_headings":"","what":"Downloading images","title":"photosearcher","text":"package can also download images based unique id number. can direct download save directory, exists automatically created. Downloading images allows validation contents. , demonstrate download first five images found using foxes photo_search example, well single image. downloading image, users need certain pixel width height dimensions (.e. Google Vision limits), values can specified. package download images owner Flickr granted download permission. without permission downloaded. function also provides dataframe outlining photographs able downloaded. Permission download automatically provide permission use distribute, check photographs licence use. photo_search function provides licence information image.","code":"#Downloading fox images from photosearch downloaded_foxes <- download_images(photo_id = foxes$id[1:5],                                      save_dir = \".\")  #Download a specific images based off its id single_download <- download_images(photo_id = 48704764812,                                     save_dir = \".\",                                    max_image_height = 1200,                                    max_image_width = 1200)"},{"path":"https://docs.ropensci.org/photosearcher/articles/photosearcher.html","id":"finding-information-on-a-user","dir":"Articles","previous_headings":"","what":"Finding information on a user","title":"photosearcher","text":"Flickr API can also return publicly available data users. user_info function returns non-identifying information including hometown occupation. information used studies aiming calculate distance people travel take photographs certain places things.","code":"#Find a users hometown user <- user_info(user_id = \"155421853@N05\")  user$hometown  user$occupation"},{"path":"https://docs.ropensci.org/photosearcher/articles/photosearcher.html","id":"get-the-top-tags-for-a-location","dir":"Articles","previous_headings":"","what":"Get the top tags for a location","title":"photosearcher","text":"Users interested finding popular attractions activities  given location can request top tags given location. woe_id argument Flickr specific place identifier. places woeID can found using find_place function using online tools.","code":"#Find the tags for Southampton, UK southampton <- location_tags(woe_id = 35356)  #Find the tags for New York state, US new_york <- location_tags(woe_id =  2347591)"},{"path":"https://docs.ropensci.org/photosearcher/articles/photosearcher.html","id":"find-a-locations-woeid","dir":"Articles","previous_headings":"","what":"Find a locations woeID","title":"photosearcher","text":"Users can also call Flickr API find information given location.","code":"#Find woeID for Kuala Lumpur   kuala_lumpur <- find_place(place = \"Kuala Lumpur\")    kuala_lumpaur$woeid"},{"path":"https://docs.ropensci.org/photosearcher/articles/photosearcher.html","id":"finding-tags-most-associated-with-another-tag","dir":"Articles","previous_headings":"","what":"Finding tags most associated with another tag","title":"photosearcher","text":"Flickr API can perform clustered usage analysis given tag, returning tags often tagged alongside given tag. information done check Flickrs getRelated documentation","code":"#Find tags associated with zebra   zebra <- related_tags(tag = \"zebra\")    #Find tags most assoicated with hiking   hiking <- related_tags(tag = \"hiking\")      #Find tags most associated with the word church   church <- related_tags(tag = \"church\")"},{"path":"https://docs.ropensci.org/photosearcher/articles/photosearcher.html","id":"finding-exif-information-about-a-photo","dir":"Articles","previous_headings":"","what":"Finding Exif information about a photo","title":"photosearcher","text":"Flickr API can also return Exchangeable image file format (Exif) data. information Flickrs Exif data see Flickrs getExif documentation","code":"#Find Exif information about a single photo   exif_photo <- get_exif(photo_id = 48704764812)"},{"path":"https://docs.ropensci.org/photosearcher/articles/photosearcher.html","id":"finding-information-on-a-single-photo","dir":"Articles","previous_headings":"","what":"Finding information on a single photo","title":"photosearcher","text":"well searching metadata photographs based search terms, users can also find information single photograph using unique photograph number.","code":"#Find information about a single photo   single_photo <- get_photoinfo(photo_id = 48704764812)"},{"path":"https://docs.ropensci.org/photosearcher/articles/photosearcher.html","id":"find-interesting-photographs","dir":"Articles","previous_headings":"","what":"Find interesting photographs","title":"photosearcher","text":"Flickr algorithm selecting list 500 interesting images day. Users can get list using interesting_list function.","code":"#Find information about a single photo   interesting <- interesting_list(date = \"2019-01-01\")"},{"path":"https://docs.ropensci.org/photosearcher/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nathan Fox. Author, maintainer. Francesca Mancini. Author. Laura Graham. Author. Louis Sutter. Author. Tom August. Author.","code":""},{"path":"https://docs.ropensci.org/photosearcher/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nathan Fox, Tom August, Francesca Mancini, Katherine E. Parks, Felix Eigenbrod, James M. Bullock, Louis Sutter, Laura J. Graham, 'photosearcher' package R: accessible reproducible method harvesting large datasets Flickr, SoftwareX, Volume 12, 2020, 100624,ISSN 2352-7110, https://doi.org/10.1016/j.softx.2020.100624.","code":"@Article{,   title = {'photosearcher' package in R: An accessible and reproducible method for harvesting large datasets from Flickr},   author = {Nathan Fox and Tom August and Francesca Mancini and Katherine E. Parks and Felix Eigenbrod and James M. Bullock and Louis Sutter and Laura J. Graham},   journal = {SoftwareX},   year = {2020},   volume = {12},   number = {1},   pages = {100624},   url = {https://doi.org/10.1016/j.softx.2020.100624},   doi = {10.1016/j.softx.2020.100624}, }"},{"path":"https://docs.ropensci.org/photosearcher/index.html","id":"photosearcher-","dir":"","previous_headings":"","what":"Photo Searcher","title":"Photo Searcher","text":"goal photosearcher provide repeatable methodology accessing Flickr API. information can found package website. information examples functions check package vignette. produced package help facilitate reproducible code answering research questions. PLoS journals alone 180 articles Flickr keywords. Click overview use Flickr PLoS journals. Articles using Flickr published wide range journals wide range research fields including biology life sciences, computer information sciences, medicine health sciences politics.","code":""},{"path":"https://docs.ropensci.org/photosearcher/index.html","id":"terms-of-use","dir":"","previous_headings":"","what":"Terms of use","title":"Photo Searcher","text":"package used within accordance Flickr API terms use.","code":""},{"path":"https://docs.ropensci.org/photosearcher/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Photo Searcher","text":"can install released version photosearcher github :","code":"devtools::install_github(\"nfox29/photosearcher\")"},{"path":"https://docs.ropensci.org/photosearcher/index.html","id":"getting-an-api-key","dir":"","previous_headings":"","what":"Getting an API key","title":"Photo Searcher","text":"package requires valid API key Flickr development page. first time call function package, prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":"https://docs.ropensci.org/photosearcher/index.html","id":"package-functions","dir":"","previous_headings":"","what":"Package functions","title":"Photo Searcher","text":"package currently focuses ability use Flickr API search images metadata photo_search function (see flickr.photos.search method) information. photographs can downloaded using download_images function saves images .jpeg file. package also allows users find top tags given location (location_tags) tags commonly associated given tag (related_tags). Flickr website offers full API Documentation call methods.","code":""},{"path":"https://docs.ropensci.org/photosearcher/index.html","id":"searching-for-photo-metadata","dir":"","previous_headings":"","what":"Searching for photo metadata","title":"Photo Searcher","text":"example, demonstrate search metadata images labelled text keywords rock climbing 2010 2019 UK Ireland. has_geo == TRUE metadata images latitude longitude information retrieved. can plotted using packages user preference. example, convert sf object plot using ggplot2.","code":"library(photosearcher)  rock_climbing <- photo_search(   mindate_taken = \"2010-01-01\",   maxdate_taken = \"2018-01-01\",   text = \"rock climbing\",   bbox = \"-12.875977,49.210420,2.636719,59.977005\",   has_geo = TRUE ) library(sf) rock_climbing <- st_as_sf(rock_climbing, coords = c(\"longitude\", \"latitude\"))  library(ggplot2) ggplot() +   geom_polygon(data = map_data(\"world\", region = c(\"Ireland\", \"UK\")),                                 aes(x=long, y = lat, group = group),                                fill = \"lightgrey\") +    geom_sf(data = rock_climbing) +    theme_bw()"},{"path":"https://docs.ropensci.org/photosearcher/index.html","id":"issues-and-bugs","dir":"","previous_headings":"","what":"Issues and bugs","title":"Photo Searcher","text":"package requires internet connection well connection Flickr API, may constantly available. discover bug associated connection API already reported issue, please open new issue providing reproducible example.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/download_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Download images — download_images","title":"Download images — download_images","text":"Downloads images based Flickr ID. Uses flickr.photos.getSizes API method Flickr API test whether permission download image. See https://www.flickr.com/services/api/flickr.photos.getSizes.html information API method. permission available image downloaded saved .jpeg given save directory.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/download_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download images — download_images","text":"","code":"download_images(   photo_id,   save_dir = NULL,   max_image_height = NULL,   max_image_width = NULL,   overwrite_file = FALSE,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/photosearcher/reference/download_images.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download images — download_images","text":"photo_id numeric character vector. id photo download, can single id, list column photo_search outputs save_dir character. name directory photos saved . max_image_height numeric. maximum number pixels images height max_image_width numeric. maximum number pixels images width overwrite_file logical. Whether overwritten existing files. TRUE, files overwritten warned output. Default FALSE. quiet logical. TRUE, suppress status messages (), progress bar.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/download_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download images — download_images","text":"character. vector images attempted downloaded whether . image downloaded, information provided. Images saved save_dir.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/download_images.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download images — download_images","text":"Please aware download times vary depending number photographs, size photographs, internet speed factors. Downloading large amount photographs may take time. running function need API key saved photosearcher_key.sysdata working directory. first function run prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/download_images.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download images — download_images","text":"","code":"if (FALSE) { download_images(photo_id = 48704764812, save_dir = \".\")  download_images(photo_id = 48704764812, max_image_height = 1200, max_image_width = 1200, save_dir = \".\") }"},{"path":"https://docs.ropensci.org/photosearcher/reference/findPlaces.html","id":null,"dir":"Reference","previous_headings":"","what":"Find place location data — findPlaces","title":"Find place location data — findPlaces","text":"Find WoeID location data given place","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/findPlaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find place location data — findPlaces","text":"","code":"find_place(place)"},{"path":"https://docs.ropensci.org/photosearcher/reference/findPlaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find place location data — findPlaces","text":"place character. place query","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/findPlaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find place location data — findPlaces","text":"data.frame. Information locations share name search location. Nine variables returned: place_id, woe_id, latitude, longitude, place_url, place_type, place_type_id, timezone, woe_name.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/findPlaces.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find place location data — findPlaces","text":"Takes user defined location returns location data search. Uses flickr.places.find API method Flickr API. See https://www.flickr.com/services/api/flickr.places.find.html information API method. running function need API key saved photosearcher_key.sysdata working directory. first function run prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/findPlaces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find place location data — findPlaces","text":"","code":"if (FALSE) { find_place(place = \"New York\")  find_place(place = \"England\") }"},{"path":"https://docs.ropensci.org/photosearcher/reference/get_exif.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Exif data — get_exif","title":"Get Exif data — get_exif","text":"Returns Exchangeable image file format data single photograph. information Exif data differs metadata see: https://www.flickr.com/services/api/flickr.photos.getExif.html","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/get_exif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Exif data — get_exif","text":"","code":"get_exif(photo_id = NULL)"},{"path":"https://docs.ropensci.org/photosearcher/reference/get_exif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Exif data — get_exif","text":"photo_id Id photograph","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/get_exif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Exif data — get_exif","text":"dataframe \"exchangeable image file format\" information given photograph","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/get_exif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Exif data — get_exif","text":"running function need API key saved photosearcher_key.sysdata working directory. first function run prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/get_exif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Exif data — get_exif","text":"","code":"if (FALSE) { get_exif(photo_id = 48704764812) }"},{"path":"https://docs.ropensci.org/photosearcher/reference/get_photoinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata for a single photo — get_photoinfo","title":"Get metadata for a single photo — get_photoinfo","text":"Returns image metadata single photograph.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/get_photoinfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata for a single photo — get_photoinfo","text":"","code":"get_photoinfo(photo_id = NULL)"},{"path":"https://docs.ropensci.org/photosearcher/reference/get_photoinfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata for a single photo — get_photoinfo","text":"photo_id Character, required. id photo get information .","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/get_photoinfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata for a single photo — get_photoinfo","text":"Dataframe information given image","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/get_photoinfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get metadata for a single photo — get_photoinfo","text":"running function need API key saved photosearcher_key.sysdata working directory. first function run prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/get_photoinfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata for a single photo — get_photoinfo","text":"","code":"if (FALSE) { get_photoinfo(photo_id = 48704764812) }"},{"path":"https://docs.ropensci.org/photosearcher/reference/interesting_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Interesting list — interesting_list","title":"Interesting list — interesting_list","text":"Returns Flickr generated list photographs deemed interesting. information list calculated see: http://www.steves-digicams.com/knowledge-center/-tos/online-sharing-social-networking/--flickr-interestingness.html#b","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/interesting_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interesting list — interesting_list","text":"","code":"interesting_list(date = \"2019-01-01\")"},{"path":"https://docs.ropensci.org/photosearcher/reference/interesting_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interesting list — interesting_list","text":"date Character, required. Interestingness list date provided. date form \"YYYY-MM-DD\".","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/interesting_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interesting list — interesting_list","text":"data.frame. Output consists 57 variables including; latitude longitude photograph, date time taken, associated tags image urls. Full list variables returned: id: photograph's unique id number owner: unique id Flickr user secret: photograph unique secret number server: Flickr server data farm: Flickr server data title: photograph title ispublic: whether photograph public; 1 = yes, 0 = isfriend whether user friend; 1 = yes, 0 = isfamily whether user family; 1 = yes, 0 = license: use licence image see https://www.flickr.com/services/api/flickr.photos.licenses.getInfo.html details datetaken: date time image capture datetakengranularity: accuracy image date see https://www.flickr.com/services/api/misc.dates.html information dates datetakenunknown: whether date unknown see https://www.flickr.com/services/api/misc.dates.html information dates count_views: number view photograph , count_comments: number comments photograph count_faves: number times photograph favourited tags: user defined tags photograph latitude: latitude image taken longitude: longitude image taken accuracy: accuracy spatial reference see https://www.flickr.com/services/api/flickr.photos.search.html  information context: numeric value representing photo's geotagginess beyond latitude longitude https://www.flickr.com/services/api/flickr.photos.search.html  information place_id: unique numeric number representing location photograph woeid: unique numeric number representing location photograph geo_is_family: whether friends can see geo; 1 = yes, 0 = geo_is_friend: whether family can see geo; 1 = yes, 0 = geo_is_contact: whether contact can see geo; 1 = yes, 0 = geo_is_public whether geo public; 1 = yes, 0 = url_sq: URL square image height_sq: height square image width_sq: width square image url_t: URL square image thumbnail image 100 longest side height_t: height thumbnail image 100 longest side, width_t: width thumbnail image 100 longest side url_s: URL small square image 75x75 height_s: height small square image 75x75 width_s: width small square image 75x75 url_q: URL large square image 150x150 height_q: height large square image 150x150 width_q: width large square image 150x150 url_m: URL small image 240 longest side height_m: height small image 240 longest side width_m: width small image 240 longest side url_n: URL small image 320 longest side height_n: height small image 320 longest side width_n: width small image 320 longest side url_z: URL medium image 640 longest side height_z: height medium image 640 longest side width_z: width medium image 640 longest side url_c: URL medium image 800 longest side height_c: height medium image 800 longest side width_c: width medium image 800 longest side url_l: URL large image 1024 longest side height_l: height large image 1024 longest side width_l: width large image 1024 longest side url_o: URL original image, either jpg, gif png, depending source format height_o: height original image, either jpg, gif png, depending source format width_o: width original image, either jpg, gif png, depending source format","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/interesting_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interesting list — interesting_list","text":"running function need API key saved photosearcher_key.sysdata working directory. first function run prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/interesting_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interesting list — interesting_list","text":"","code":"if (FALSE) {  interesting_list(date = \"2019-01-01\")  interesting_list(date = \"2017-05-05\")  interesting_list(date = \"2011-11-25\")  }"},{"path":"https://docs.ropensci.org/photosearcher/reference/location_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top tags for a location — location_tags","title":"Get top tags for a location — location_tags","text":"Takes user defined location returns top tags related location. Uses flickr.places.tagsForPlace API method Flickr API. See https://www.flickr.com/services/api/flickr.places.tagsForPlace.html information API method.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/location_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top tags for a location — location_tags","text":"","code":"location_tags(woe_id)"},{"path":"https://docs.ropensci.org/photosearcher/reference/location_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get top tags for a location — location_tags","text":"woe_id numeric. \"Earth\" location tag.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/location_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get top tags for a location — location_tags","text":"character. List top 100 tags associated woe_id.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/location_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get top tags for a location — location_tags","text":"running function need API key saved photosearcher_key.sysdata working directory. first function run prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/location_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get top tags for a location — location_tags","text":"","code":"if (FALSE) { location_tags(woe_id = 35356) }"},{"path":"https://docs.ropensci.org/photosearcher/reference/photo_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for photo metadata — photo_search","title":"Search for photo metadata — photo_search","text":"Returns image metadata photos matching search terms.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/photo_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for photo metadata — photo_search","text":"","code":"photo_search(   mindate_taken = NULL,   maxdate_taken = NULL,   mindate_uploaded = NULL,   maxdate_uploaded = NULL,   user_id = NULL,   text = NULL,   tags = NULL,   tags_any = TRUE,   bbox = NULL,   woe_id = NULL,   sf_layer = NULL,   has_geo = TRUE )"},{"path":"https://docs.ropensci.org/photosearcher/reference/photo_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for photo metadata — photo_search","text":"mindate_taken Character, date required. Minimum taken date. Photos taken date greater equal value returned. date form \"YYYY-MM-DD\". maxdate_taken Character, date required. Maximum taken date. Photos taken date less equal value returned. date form \"YYYY-MM-DD\". mindate_uploaded Character date, optional. Minimum upload date. Photos upload date greater equal value returned. date can form unix timestamp mysql datetime. maxdate_uploaded Character date, optional. Maximum upload date. Photos upload date less equal value returned. date can form unix timestamp mysql datetime. user_id Character, optional. Flickr ID user photo search. parameter passed everybody's public photos searched. text Character, optional. free text search. Photos title, description tags contain text returned. can exclude results match term prepending - character. Free text searches words order provided, example search \"climbing rock\" different \"rock climbing\". tags Character vector, optional. comma-delimited list tags. Photos one tags listed returned. can exclude results match term prepending - character. tags_any Logical, optional. TRUE, photos containing tags returned. FALSE, photos containing tags returned. Defaulted return tags. bbox String, optional bounding box search area provide : \"minimum_longitude,minimum_latitude,maximum_longitude,maximum_latitude\". woe_id String, optional \"earth identifier\" can supplied instead bbox. Use find_place obtain woe_id place. sf_layer simple features layer, optional, area search photos, can supplied instead bbox woeID. has_geo Logical, optional parameter whether returned photos need associated spatial data.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/photo_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for photo metadata — photo_search","text":"data.frame. Output consists 57 variables including; latitude longitude photograph, date time taken, associated tags image urls. Full list variables returned: id: photograph's unique id number owner: unique id Flickr user secret: photograph unique secret number server: Flickr server data farm: Flickr server data title: photograph title ispublic: whether photograph public; 1 = yes, 0 = isfriend whether user friend; 1 = yes, 0 = isfamily whether user family; 1 = yes, 0 = license: use licence image see https://www.flickr.com/services/api/flickr.photos.licenses.getInfo.html details datetaken: date time image capture datetakengranularity: accuracy image date see https://www.flickr.com/services/api/misc.dates.html information dates datetakenunknown: whether date unknown see https://www.flickr.com/services/api/misc.dates.html information dates count_views: number view photograph , count_comments: number comments photograph count_faves: number times photograph favourited tags: user defined tags photograph latitude: latitude image taken longitude: longitude image taken accuracy: accuracy spatial reference see https://www.flickr.com/services/api/flickr.photos.search.html  information context: numeric value representing photo's geotagginess beyond latitude longitude https://www.flickr.com/services/api/flickr.photos.search.html  information place_id: unique numeric number representing location photograph woeid: unique numeric number representing location photograph geo_is_family: whether friends can see geo; 1 = yes, 0 = geo_is_friend: whether family can see geo; 1 = yes, 0 = geo_is_contact: whether contact can see geo; 1 = yes, 0 = geo_is_public whether geo public; 1 = yes, 0 = url_sq: URL square image height_sq: height square image width_sq: width square image url_t: URL square image thumbnail image 100 longest side height_t: height thumbnail image 100 longest side, width_t: width thumbnail image 100 longest side url_s: URL small square image 75x75 height_s: height small square image 75x75 width_s: width small square image 75x75 url_q: URL large square image 150x150 height_q: height large square image 150x150 width_q: width large square image 150x150 url_m: URL small image 240 longest side height_m: height small image 240 longest side width_m: width small image 240 longest side url_n: URL small image 320 longest side height_n: height small image 320 longest side width_n: width small image 320 longest side url_z: URL medium image 640 longest side height_z: height medium image 640 longest side width_z: width medium image 640 longest side url_c: URL medium image 800 longest side height_c: height medium image 800 longest side width_c: width medium image 800 longest side url_l: URL large image 1024 longest side height_l: height large image 1024 longest side width_l: width large image 1024 longest side url_o: URL original image, either jpg, gif png, depending source format height_o: height original image, either jpg, gif png, depending source format width_o: width original image, either jpg, gif png, depending source format description: Flickr user generated text description photograph","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/photo_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for photo metadata — photo_search","text":"Uses flickr.photos.search API method Flickr API. search method requires limiting factor prevent parameterless searches - ensure met function requires minimum maximum date searched photographs taken . See https://www.flickr.com/services/api/flickr.photos.search.html information API method. running function need API key saved photosearcher_key.sysdata working directory. first function run prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/photo_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for photo metadata — photo_search","text":"","code":"if (FALSE) { photo_search(   mindate_taken = \"2019-01-01\",   maxdate_taken = \"2019-01-02\",   text = \"tree\",   bbox = \"-13.623047,47.279229,3.251953,60.630102\",   has_geo = TRUE   )  photo_search(   mindate_taken = \"2017-01-01\",   maxdate_taken = \"2017-01-02\",   mindate_uploaded = \"2017-03-04\",   maxdate_uploaded = \"2017-05-05\",   tags = \"lake\"   )  photo_search(   mindate_taken = \"2018-01-01\",   maxdate_taken = \"2018-01-03\",   tags = c(\"mountain\", \"lake\"),   tags_any = TRUE )  photo_search(   mindate_taken = \"2018-01-01\",   maxdate_taken = \"2018-01-03\",   tags = c(\"mountain\", \"lake\"),   tags_any = FALSE )  }"},{"path":"https://docs.ropensci.org/photosearcher/reference/photosearcher-package.html","id":null,"dir":"Reference","previous_headings":"","what":"photosearcher: Photo Searcher — photosearcher-package","title":"photosearcher: Photo Searcher — photosearcher-package","text":"Queries Flick API (https://www.flickr.com/services/api/) return photograph metadata well ability download images jpegs.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/photosearcher-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"photosearcher: Photo Searcher — photosearcher-package","text":"Maintainer: Nathan Fox nf2g13@soton.ac.uk Authors: Francesca Mancini Laura Graham Louis Sutter Tom August","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/reddit_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Reddit for posts — reddit_search","title":"Search Reddit for posts — reddit_search","text":"Searches given term set terms across Reddit chosen dates. Can limited specific subreddit.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/reddit_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Reddit for posts — reddit_search","text":"","code":"reddit_search(   search_term = NULL,   subreddit = NULL,   start_date = \"2020-01-01\",   end_date = \"2021-01-01\" )"},{"path":"https://docs.ropensci.org/photosearcher/reference/reddit_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Reddit for posts — reddit_search","text":"end_date","code":""},{"path":[]},{"path":"https://docs.ropensci.org/photosearcher/reference/related_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Get related tags — related_tags","title":"Get related tags — related_tags","text":"Takes tag returns top tags related tag.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/related_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get related tags — related_tags","text":"","code":"related_tags(tag)"},{"path":"https://docs.ropensci.org/photosearcher/reference/related_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get related tags — related_tags","text":"tag character. tag search.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/related_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get related tags — related_tags","text":"character. Tags associated input tag.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/related_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get related tags — related_tags","text":"Uses flickr.tags.getRelated API method Flickr API. See https://www.flickr.com/services/api/flickr.tags.getRelated.html information API method. running function need API key saved photosearcher_key.sysdata working directory. first function run prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/related_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get related tags — related_tags","text":"","code":"if (FALSE) { related_tags(tag = \"car\")  related_tags(tag = \"monkey\")  related_tags(tag = \"river\") }"},{"path":"https://docs.ropensci.org/photosearcher/reference/user_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get user information — user_info","title":"Get user information — user_info","text":"Takes Flickr user ID returns profile data.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/user_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get user information — user_info","text":"","code":"user_info(user_id)"},{"path":"https://docs.ropensci.org/photosearcher/reference/user_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get user information — user_info","text":"user_id character. id user wish obtain information .","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/user_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get user information — user_info","text":"data.frame. Dataframe 5 variables searched users publicly available information: id, occupation, hometown, city, country.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/user_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get user information — user_info","text":"Uses flickr.profile.getProfile API method Flickr API. See https://www.flickr.com/services/api/flickr.profile.getProfile.html information API method. See https://www.pixsy.com/academy/flickr-id/ guide finding Flickr ID. running function need API key saved photosearcher_key.sysdata working directory. first function run prompted create enter API key. API key saved photosearcher_key.sysdata working directory used function.","code":""},{"path":"https://docs.ropensci.org/photosearcher/reference/user_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get user information — user_info","text":"","code":"if (FALSE) { user_info(user_id = \"155421853@N05\") }"}]
